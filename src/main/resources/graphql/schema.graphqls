
schema {
    query: Query
    mutation: Mutation
}
###############################################################################################
# Q U E R I E S
###############################################################################################
type Query {
    # Einzelne Rechnung nach ID (Zugriff wird im Backend abgesichert)
    invoiceById(id: ID!): Invoice

    # Allgemeine Suche 체ber Filter
    invoices(searchCriteria: InvoiceSearchCriteria): [Invoice!]

    # Alle Rechnungen eines Kunden (als Aussteller ODER Empf채nger)
    invoicesByCustomer(customerId: ID!, searchCriteria: InvoiceSearchCriteria): [Invoice!]

    # Gesamtsummen nach Status (z.B. "alle PAID")
    totalInvoicesInfo(isIssuer: Boolean, personId: ID, infoType: InfoType, status: InvoiceStatusType): InvoiceInfoPayload

    # Summen und Z채hler f체r einen Kunden (als issuer oder recipient)
    invoiceInfoByCustomer(customerId: ID!, infoType: InfoType): InvoiceInfoPayload

    # Alle Zahlungen zu einer spezifischen Rechnung
    paymentInfo(invoiceId: ID!): InvoiceInfoPayload
}
###############################################################################################
    # M U T A T I O N S
###############################################################################################
type Mutation {
    createInvoice(input: InvoiceInput!): ID!
    deleteInvoice(customerId: ID!): Boolean
    makePayment( input: PaymentDTO): Float!
}